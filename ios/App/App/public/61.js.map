{"version":3,"file":"61.js","mappings":"kIAIA,MAAMA,GAAMC,EAAAA,EAAAA,IAA0B,MAAO,CAC3CC,IAAKA,IAAM,6BAAgBC,MAAKC,GAAK,IAAIA,EAAEC,WCFtC,MAAMC,UAA0BC,EAAAA,GACnCC,iBAAAA,CAAkBC,GACd,OAAOT,EAAIU,YAAY,kBAAkB,EAAGC,eACpCA,GACAC,KAAKC,gBACAV,MAAMW,IACPL,EAASK,EAAK,IAEbC,MAAMC,QAAQC,MACvB,GAER,E,kFCXG,MAAMC,UAA4BZ,EAAAA,EACrCa,WAAAA,CAAYC,GACRC,QACAT,KAAKC,cAAgBO,EAASP,cAC9BD,KAAKU,aAAeF,EAASE,YACjC,CACA,mBAAMT,GAEF,OAAOU,QAAQC,QAAQ,CACnBC,aAAa,EACbC,aAAcC,EAAAA,GAAaC,KAC3BC,OAAQ,GACRC,KAAMC,EAAAA,GAAkBH,MAEhC,CAEA,kBAAMN,CAAaU,GAAW,CAE9B,qBAAMC,CAENC,GACI,MAAMtB,KAAKuB,cAAc,8BAC7B,E","sources":["webpack://ds-mobile/../../src/index.ts","webpack://ds-mobile/./node_modules/@aparajita/capacitor-biometric-auth/dist/esm/base.js","webpack://ds-mobile/./node_modules/@aparajita/capacitor-biometric-auth/dist/esm/native.js"],"sourcesContent":["import { registerPlugin } from '@capacitor/core';\n\nimport type { AppPlugin } from './definitions';\n\nconst App = registerPlugin<AppPlugin>('App', {\n  web: () => import('./web').then(m => new m.AppWeb()),\n});\n\nexport * from './definitions';\nexport { App };\n","import { App } from '@capacitor/app';\nimport { WebPlugin } from '@capacitor/core';\n// eslint-disable-next-line import/prefer-default-export\nexport class BiometricAuthBase extends WebPlugin {\n    addResumeListener(listener) {\n        return App.addListener('appStateChange', ({ isActive }) => {\n            if (isActive) {\n                this.checkBiometry()\n                    .then((info) => {\n                    listener(info);\n                })\n                    .catch(console.error);\n            }\n        });\n    }\n}\n","import { BiometricAuthBase } from './base';\nimport { BiometryErrorType, BiometryType } from './definitions';\n// eslint-disable-next-line import/prefer-default-export\nexport class BiometricAuthNative extends BiometricAuthBase {\n    constructor(capProxy) {\n        super();\n        this.checkBiometry = capProxy.checkBiometry;\n        this.authenticate = capProxy.authenticate;\n    }\n    async checkBiometry() {\n        // Never used, satisfy the compiler\n        return Promise.resolve({\n            isAvailable: true,\n            biometryType: BiometryType.none,\n            reason: '',\n            code: BiometryErrorType.none,\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars,@typescript-eslint/no-empty-function\n    async authenticate(options) { }\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async setBiometryType(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    type) {\n        throw this.unimplemented('setBiometryType is web only');\n    }\n}\n"],"names":["App","registerPlugin","web","then","m","AppWeb","BiometricAuthBase","WebPlugin","addResumeListener","listener","addListener","isActive","this","checkBiometry","info","catch","console","error","BiometricAuthNative","constructor","capProxy","super","authenticate","Promise","resolve","isAvailable","biometryType","BiometryType","none","reason","code","BiometryErrorType","options","setBiometryType","type","unimplemented"],"sourceRoot":""}