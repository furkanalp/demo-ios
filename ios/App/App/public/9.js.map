{"version":3,"file":"9.js","mappings":"iIAIA,MAAMA,GAAMC,EAAAA,EAAAA,IAA0B,MAAO,CAC3CC,IAAKA,IAAM,6BAAgBC,MAAKC,GAAK,IAAIA,EAAEC,WCFtC,MAAMC,UAA0BC,EAAAA,GACnCC,iBAAAA,CAAkBC,GACd,OAAOT,EAAIU,YAAY,kBAAkB,EAAGC,eACpCA,GACAC,KAAKC,gBACAV,MAAMW,IACPL,EAASK,EAAK,IAEbC,MAAMC,QAAQC,MACvB,GAER,E,sFCVG,MAAMC,UAAyBZ,EAAAA,EAClCa,WAAAA,GACIC,SAASC,WACTT,KAAKU,aAAeC,EAAAA,GAAaC,IACrC,CACA,mBAAMX,GACF,OAAOY,QAAQC,QAAQ,CACnBC,YAAaf,KAAKU,eAAiBC,EAAAA,GAAaC,KAChDF,aAAcV,KAAKU,aACnBM,OAAQ,GACRC,KAAMC,EAAAA,GAAkBN,MAEhC,CACA,kBAAMO,CAAaC,GACf,OAAOpB,KAAKC,gBAAgBV,MAAK,EAAGwB,cAAaL,mBAC7C,GAAIK,EAAa,CACb,GAEAM,SAASD,aAAyC,EAASA,EAAQJ,SAC9D,sBAAoBM,EAAAA,EAAAA,GAAgBZ,OACrC,OAEJ,MAAM,IAAIa,EAAAA,GAAc,iBAAkBL,EAAAA,GAAkBM,WAChE,CACA,MAAM,IAAID,EAAAA,GAAc,yBAA0BL,EAAAA,GAAkBO,qBAAqB,GAEjG,CACA,qBAAMC,CAAgBC,GAClB,YAAoB,IAATA,IAGS,iBAATA,EAEHhB,EAAAA,GAAaiB,eAAeD,KAE5B3B,KAAKU,aAAeC,EAAAA,GAAagB,IAIrC3B,KAAKU,aAAeiB,GAVbd,QAAQC,SAavB,E","sources":["webpack://ds-mobile/../../src/index.ts","webpack://ds-mobile/./node_modules/@aparajita/capacitor-biometric-auth/dist/esm/base.js","webpack://ds-mobile/./node_modules/@aparajita/capacitor-biometric-auth/dist/esm/web.js"],"sourcesContent":["import { registerPlugin } from '@capacitor/core';\n\nimport type { AppPlugin } from './definitions';\n\nconst App = registerPlugin<AppPlugin>('App', {\n  web: () => import('./web').then(m => new m.AppWeb()),\n});\n\nexport * from './definitions';\nexport { App };\n","import { App } from '@capacitor/app';\nimport { WebPlugin } from '@capacitor/core';\n// eslint-disable-next-line import/prefer-default-export\nexport class BiometricAuthBase extends WebPlugin {\n    addResumeListener(listener) {\n        return App.addListener('appStateChange', ({ isActive }) => {\n            if (isActive) {\n                this.checkBiometry()\n                    .then((info) => {\n                    listener(info);\n                })\n                    .catch(console.error);\n            }\n        });\n    }\n}\n","import { BiometricAuthBase } from './base';\nimport { BiometryError, BiometryErrorType, BiometryType } from './definitions';\nimport { getBiometryName } from './web-utils';\n// eslint-disable-next-line import/prefer-default-export\nexport class BiometricAuthWeb extends BiometricAuthBase {\n    constructor() {\n        super(...arguments);\n        this.biometryType = BiometryType.none;\n    }\n    async checkBiometry() {\n        return Promise.resolve({\n            isAvailable: this.biometryType !== BiometryType.none,\n            biometryType: this.biometryType,\n            reason: '',\n            code: BiometryErrorType.none,\n        });\n    }\n    async authenticate(options) {\n        return this.checkBiometry().then(({ isAvailable, biometryType }) => {\n            if (isAvailable) {\n                if (\n                // eslint-disable-next-line no-alert\n                confirm((options === null || options === void 0 ? void 0 : options.reason) ||\n                    `Authenticate with ${getBiometryName(biometryType)}?`)) {\n                    return;\n                }\n                throw new BiometryError('User cancelled', BiometryErrorType.userCancel);\n            }\n            throw new BiometryError('Biometry not available', BiometryErrorType.biometryNotAvailable);\n        });\n    }\n    async setBiometryType(type) {\n        if (typeof type === 'undefined') {\n            return Promise.resolve();\n        }\n        if (typeof type === 'string') {\n            // eslint-disable-next-line no-prototype-builtins\n            if (BiometryType.hasOwnProperty(type)) {\n                // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                this.biometryType = BiometryType[type];\n            }\n        }\n        else {\n            this.biometryType = type;\n        }\n        return Promise.resolve();\n    }\n}\n"],"names":["App","registerPlugin","web","then","m","AppWeb","BiometricAuthBase","WebPlugin","addResumeListener","listener","addListener","isActive","this","checkBiometry","info","catch","console","error","BiometricAuthWeb","constructor","super","arguments","biometryType","BiometryType","none","Promise","resolve","isAvailable","reason","code","BiometryErrorType","authenticate","options","confirm","getBiometryName","BiometryError","userCancel","biometryNotAvailable","setBiometryType","type","hasOwnProperty"],"sourceRoot":""}